package com.acme.planning.housecleaning;
    dialect "java"

//import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import com.acme.planning.model.HouseCleaningSpot;
import com.acme.planning.model.Cleaner;

//global HardSoftScoreHolder scoreHolder;
global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
rule "Conflict: 1 cleaner has to clean 2 houses on the same day of week"
when
   HouseCleaningSpot($c : cleaner, cleaner != null, $d : house.dayOfWeek.dayId, $leftId : id)
   HouseCleaningSpot(cleaner == $c, house.dayOfWeek.dayId == $d, id > $leftId)
then
   scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "overconstrained: leave as little possible unassigned spots"
    when
        HouseCleaningSpot(cleaner == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Minimize traveling distance"
when
   HouseCleaningSpot($d : distanceFromCleanerToHouse)
then
   scoreHolder.addSoftConstraintMatch(kcontext, -$d);
   //int a = 1;
   //System.out.println("Step is now ::: "+a++);
end
